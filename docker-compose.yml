services:
  app1:
    image: 'user-service:latest'
    build:
      context: ./UserService
    container_name: app1
    depends_on:
      - db1
      - eureka-server
    ports:
      - "2432:2432"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db1:2431/userdb
      - SPRING_DATASOURCE_USERNAME=user
      - SPRING_DATASOURCE_PASSWORD=u78s78er9
      - SERVER_PORT=2432
  db1:
    image: 'postgres:latest'
    restart: always
    environment:
      - POSTGRES_DB=userdb
      - POSTGRES_PASSWORD=u78s78er9
      - POSTGRES_USER=user
    ports:
      - "2431:2431"
    command: postgres -p 2431
  eureka-server:
    build:
      context: ./service-registry
    container_name: service-registry
    depends_on:
      - db2
      - db1
    ports:
      - "8761:8761"
    environment:
      - EUREKA_SERVER_ENABLED=true
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=false
      - EUREKA_CLIENT_FETCH_REGISTRY=false
    restart: always
  db2:
    image: 'postgres:latest'
    restart: always
    environment:
      - POSTGRES_DB=marketdb
      - POSTGRES_PASSWORD=u78s78er10
      - POSTGRES_USER=user
    ports:
      - "2531:2531"
    command: postgres -p 2531
  app2:
    image: 'market-service:latest'
    build:
      context: ./MarketService
    container_name: app2
    depends_on:
      - db2
      - eureka-server
    ports:
      - "2532:2532"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db2:2531/marketdb
      - SPRING_DATASOURCE_USERNAME=user
      - SPRING_DATASOURCE_PASSWORD=u78s78er10
      - SERVER_PORT=2532
  db3:
    image: 'postgres:latest'
    restart: always
    environment:
      - POSTGRES_DB=paymentdb
      - POSTGRES_PASSWORD=u78s78er11
      - POSTGRES_USER=user
    ports:
      - "2631:2631"
    command: postgres -p 2631
  app3:
    image: 'payment-service:latest'
    build:
      context: ./payment-service
    container_name: app3
    depends_on:
      - db3
      - eureka-server
    ports:
      - "2632:2632"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db3:2631/paymentdb
      - SPRING_DATASOURCE_USERNAME=user
      - SPRING_DATASOURCE_PASSWORD=u78s78er11
      - SERVER_PORT=2632
  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_KRAFT_MODE: "true"  # This enables KRaft mode in Kafka.
      KAFKA_PROCESS_ROLES: controller,broker  # Kafka acts as both broker and controller.
      KAFKA_NODE_ID: 1  # A unique ID for this Kafka instance.
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"  # Defines the controller voters.
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"  # Kafka will automatically create topics if needed.
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1  # Since weâ€™re running one broker, one replica is enough.
      KAFKA_LOG_RETENTION_HOURS: 168  # Keep logs for 7 days.
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0  # No delay for consumer rebalancing.
      CLUSTER_ID: "Mk3OEYBSD34fcwNTJENDM2Qk" 
    volumes:
      - kafka-data:/var/lib/kafka/data

  kafka-init:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    entrypoint: >
      sh -c "
      while ! nc -z kafka 9092; do
      sleep 1;
      done;
      /usr/bin/kafka-topics --create --topic delete.user.orders --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 &&
      /usr/bin/kafka-topics --create --topic place.payment.order --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 &&
      /usr/bin/kafka-topics --create --topic fulfill.payment.order --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1
      "
volumes:
  kafka-data: